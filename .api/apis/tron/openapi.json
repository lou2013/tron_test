{
  "openapi": "3.1.0",
  "info": {
    "title": "Full Node HTTP API",
    "version": "unknown"
  },
  "servers": [
    {
      "url": "https://api.shasta.trongrid.io"
    }
  ],
  "components": {
    "securitySchemes": {}
  },
  "security": [
    {}
  ],
  "paths": {
    "/wallet/getnowblock": {
      "post": {
        "summary": "GetNowBlock",
        "description": "Query the latest block information",
        "operationId": "wallet-getnowblock",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Output": {
                    "value": "// Example API Call Output\n\n{  \n   \"blockID\":\"00000000000080f82038aa301eda07eb27906589dd849d1c9ba5d84af94cf038\",\n   \"block_header\":{  \n      \"raw_data\":{  \n         \"number\":33016,\n         \"txTrieRoot\":\"0000000000000000000000000000000000000000000000000000000000000000\",\n         \"witness_address\":\"41928c9af0651632157ef27a2cf17ca72c575a4d21\",\n         \"parentHash\":\"00000000000080f7b502cb572e67f3ad8e75558c0cd64f54cc7c0697f08000a0\",\n         \"version\":3,\n         \"timestamp\":1536713433000\n      },\n      \"witness_signature\":\"917101db1a7f9252fa3fef139acc07153876b0a4a46e57a235f9b1578bb6da2f12d1a4bc09350e3c5b609353876ffdd581bd903ce31304e42066e363853cf77d00\"\n   }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "blockID": {
                      "type": "string",
                      "example": "00000000000080f82038aa301eda07eb27906589dd849d1c9ba5d84af94cf038"
                    },
                    "block_header": {
                      "type": "object",
                      "properties": {
                        "raw_data": {
                          "type": "object",
                          "properties": {
                            "number": {
                              "type": "integer",
                              "example": 33016,
                              "default": 0
                            },
                            "txTrieRoot": {
                              "type": "string",
                              "example": "0000000000000000000000000000000000000000000000000000000000000000"
                            },
                            "witness_address": {
                              "type": "string",
                              "example": "41928c9af0651632157ef27a2cf17ca72c575a4d21"
                            },
                            "parentHash": {
                              "type": "string",
                              "example": "00000000000080f7b502cb572e67f3ad8e75558c0cd64f54cc7c0697f08000a0"
                            },
                            "version": {
                              "type": "integer",
                              "example": 3,
                              "default": 0
                            },
                            "timestamp": {
                              "type": "integer",
                              "example": 1536713433000,
                              "default": 0
                            }
                          }
                        },
                        "witness_signature": {
                          "type": "string",
                          "example": "917101db1a7f9252fa3fef139acc07153876b0a4a46e57a235f9b1578bb6da2f12d1a4bc09350e3c5b609353876ffdd581bd903ce31304e42066e363853cf77d00"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getnowblock', function(data) {\n    console.log(data);\n});"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/getblockbynum": {
      "post": {
        "summary": "GetBlockByNum",
        "description": "Returns the Block Object corresponding to the 'Block Height' specified (number of blocks preceding it).",
        "operationId": "wallet-getblockbynum",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "num": {
                    "type": "integer",
                    "description": "num is the block height",
                    "default": 200,
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Output": {
                    "value": "// Example API Call Output\n\n{  \n   \"blockID\":\"00000000000000c82a54a3bbdc956e1ddebc903f29b8daf28505b56f55a3f87d\",\n   \"block_header\":{  \n      \"raw_data\":{  \n         \"number\":200,\n         \"txTrieRoot\":\"0000000000000000000000000000000000000000000000000000000000000000\",\n         \"witness_address\":\"411661f25387370c9cd3a9a5d97e60ca90f4844e7e\",\n         \"parentHash\":\"00000000000000c7c8f27726916dfddca3c1c3481eb01da8a08938263674cea4\",\n         \"timestamp\":1529892138000\n      },\n      \"witness_signature\":\"691e9116963b54ef7eb07692266319b029217e4d4ae8e8cb97e341617460f3822eff149c690aac6f2e0ad27d0af4fa8824d113d7a71c091245f778438ca4bde801\"\n   }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "blockID": {
                      "type": "string",
                      "example": "00000000000000c82a54a3bbdc956e1ddebc903f29b8daf28505b56f55a3f87d"
                    },
                    "block_header": {
                      "type": "object",
                      "properties": {
                        "raw_data": {
                          "type": "object",
                          "properties": {
                            "number": {
                              "type": "integer",
                              "example": 200,
                              "default": 0
                            },
                            "txTrieRoot": {
                              "type": "string",
                              "example": "0000000000000000000000000000000000000000000000000000000000000000"
                            },
                            "witness_address": {
                              "type": "string",
                              "example": "411661f25387370c9cd3a9a5d97e60ca90f4844e7e"
                            },
                            "parentHash": {
                              "type": "string",
                              "example": "00000000000000c7c8f27726916dfddca3c1c3481eb01da8a08938263674cea4"
                            },
                            "timestamp": {
                              "type": "integer",
                              "example": 1529892138000,
                              "default": 0
                            }
                          }
                        },
                        "witness_signature": {
                          "type": "string",
                          "example": "691e9116963b54ef7eb07692266319b029217e4d4ae8e8cb97e341617460f3822eff149c690aac6f2e0ad27d0af4fa8824d113d7a71c091245f778438ca4bde801"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getblockbynum', {\"num\" : 100}, function(data) {\n    console.log(data);\n});",
              "name": "JavaScript"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/createtransaction": {
      "post": {
        "summary": "CreateTransaction",
        "description": "Create a TRX transfer transaction. If to_address does not exist, then create the account on the blockchain.",
        "operationId": "createtransaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner_address is the transfer address, converted to a hex string",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "to_address": {
                    "type": "string",
                    "description": "To_address is the transfer address, converted to a hex string",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "Amount is the transfer amount,the unit is sun",
                    "default": 1000,
                    "format": "int64"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  },
                  "extra_data": {
                    "type": "string",
                    "description": "Optional,  totes on the transaction, HEX format"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/createtransaction', {\"to_address\": \"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\", \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\", \"amount\": 1000 }, function(data) {\n    console.log(data);\n});",
              "name": "JavaScript"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/listwitnesses": {
      "get": {
        "summary": "ListWitnesses",
        "description": "List all Super Representatives.",
        "operationId": "listwitnesses",
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/updateaccount": {
      "post": {
        "summary": "UpdateAccount",
        "description": "Modify account name",
        "operationId": "updateaccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner_address is the account address to be modified, converted to a hex string",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "account_name": {
                    "type": "string",
                    "description": "Account_name is the name of the account, converted to a hex string",
                    "default": "0x7570646174654e616d6531353330383933343635353139"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional,for multi-signature use",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/createaddress": {
      "post": {
        "summary": "CreateAddress",
        "description": "Creates an address from the specified password string (not the private key).This interface has been deprecated, please generate address offline.",
        "operationId": "createaddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "value is the password, converted from ascii to hex. i.e. the pass phrase.",
                    "default": "7465737470617373776f7264"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"base58checkAddress\":\"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\",\n  \"value\":\"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "base58checkAddress": {
                      "type": "string",
                      "example": "T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb"
                    },
                    "value": {
                      "type": "string",
                      "example": "T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/generateaddress": {
      "get": {
        "summary": "GenerateAddress",
        "description": "Generate a random private key and address. This API has been deprecated, please generate address offline.",
        "operationId": "generateaddress",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\"privateKey\":\"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08\",\"address\":\"TDp4x8kCJ6aHz8wnqZgkaVQAm2ajH1og3L\",\"hexAddress\":\"412a260a110bc7b03f19c40a0bd04ff2c5dcb57594\"}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "privateKey": {
                      "type": "string",
                      "example": "9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"
                    },
                    "address": {
                      "type": "string",
                      "example": "TDp4x8kCJ6aHz8wnqZgkaVQAm2ajH1og3L"
                    },
                    "hexAddress": {
                      "type": "string",
                      "example": "412a260a110bc7b03f19c40a0bd04ff2c5dcb57594"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/updateasset": {
      "post": {
        "summary": "UpdateAsset",
        "description": "Update basic TRC10 token information.",
        "operationId": "wallet-updateasset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "The issuers address of the token, default hexString",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of token, default hexString"
                  },
                  "url": {
                    "type": "string",
                    "description": "The token's website url, default hexString"
                  },
                  "new_limit": {
                    "type": "integer",
                    "description": "Each token holder's free bandwidth",
                    "format": "int32"
                  },
                  "new_public_limit": {
                    "type": "integer",
                    "description": "The total free bandwidth of the token",
                    "format": "int32"
                  },
                  "permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/listnodes": {
      "get": {
        "summary": "ListNodes",
        "description": "Query the list of nodes connected to the API node",
        "operationId": "wallet-listnodes",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/listnodes', function(data) {\n    console.log(data);\n});",
              "name": "JavaScript"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/getaccountnet": {
      "post": {
        "summary": "GetAccountNet",
        "description": "Query bandwidth information.",
        "operationId": "getaccountnet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Account address, converted to a hex string.",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Output": {
                    "value": ""
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/easytransfer": {
      "post": {
        "summary": "EasyTransfer",
        "description": "This interface has been deprecated.",
        "operationId": "easytransfer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "passPhrase",
                  "toAddress",
                  "amount"
                ],
                "properties": {
                  "passPhrase": {
                    "type": "string",
                    "description": "Password converted from ascii to hex"
                  },
                  "toAddress": {
                    "type": "string",
                    "description": "Recipient address converted into a hex string"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "Amount of TRX to transfer expressed in SUN.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getassetissuebyid": {
      "post": {
        "summary": "GetAssetIssueById",
        "description": "Query a token by token id. Returns the token object, which contains the token name.",
        "operationId": "getassetissuebyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "integer",
                    "description": "The ID of the TRC10 token.",
                    "default": 1000001,
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getassetissuebyaccount": {
      "post": {
        "summary": "GetAssetIssueByAccount",
        "description": "Query the TRC10 token information issued by an account.",
        "operationId": "getassetissuebyaccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Address is the Token Issuer account address",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getblockbyid": {
      "post": {
        "summary": "GetBlockById",
        "description": "Query block by ID(block hash).",
        "operationId": "getblockbyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Block ID",
                    "default": "00000000000f424013e51b18e0782a32fa079ddafdb2f4c343468cf8896dc887"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Output": {
                    "value": "// Example API Call Output\n\n{  \n   \"blockID\":\"00000000000000c82a54a3bbdc956e1ddebc903f29b8daf28505b56f55a3f87d\",\n   \"block_header\":{  \n      \"raw_data\":{  \n         \"number\":200,\n         \"txTrieRoot\":\"0000000000000000000000000000000000000000000000000000000000000000\",\n         \"witness_address\":\"411661f25387370c9cd3a9a5d97e60ca90f4844e7e\",\n         \"parentHash\":\"00000000000000c7c8f27726916dfddca3c1c3481eb01da8a08938263674cea4\",\n         \"timestamp\":1529892138000\n      },\n      \"witness_signature\":\"691e9116963b54ef7eb07692266319b029217e4d4ae8e8cb97e341617460f3822eff149c690aac6f2e0ad27d0af4fa8824d113d7a71c091245f778438ca4bde801\"\n   }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "blockID": {
                      "type": "string",
                      "example": "00000000000000c82a54a3bbdc956e1ddebc903f29b8daf28505b56f55a3f87d"
                    },
                    "block_header": {
                      "type": "object",
                      "properties": {
                        "raw_data": {
                          "type": "object",
                          "properties": {
                            "number": {
                              "type": "integer",
                              "example": 200,
                              "default": 0
                            },
                            "txTrieRoot": {
                              "type": "string",
                              "example": "0000000000000000000000000000000000000000000000000000000000000000"
                            },
                            "witness_address": {
                              "type": "string",
                              "example": "411661f25387370c9cd3a9a5d97e60ca90f4844e7e"
                            },
                            "parentHash": {
                              "type": "string",
                              "example": "00000000000000c7c8f27726916dfddca3c1c3481eb01da8a08938263674cea4"
                            },
                            "timestamp": {
                              "type": "integer",
                              "example": 1529892138000,
                              "default": 0
                            }
                          }
                        },
                        "witness_signature": {
                          "type": "string",
                          "example": "691e9116963b54ef7eb07692266319b029217e4d4ae8e8cb97e341617460f3822eff149c690aac6f2e0ad27d0af4fa8824d113d7a71c091245f778438ca4bde801"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getblockbyid', {\"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\"}, function(data) {\n    console.log(data);\n});",
              "name": "JavaScript"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/getblockbylimitnext": {
      "post": {
        "summary": "GetBlockByLimitNext",
        "description": "Returns the list of Block Objects included in the 'Block Height' range specified.",
        "operationId": "getblockbylimitnext",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startNum": {
                    "type": "integer",
                    "description": "Starting block height, including this block.",
                    "default": 1,
                    "format": "int32"
                  },
                  "endNum": {
                    "type": "integer",
                    "description": "Ending block height, excluding that block.",
                    "default": 5,
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getblockbylimitnext', {\"startNum\":1, \"endNum\":2}, function(data) {\n    console.log(data);\n});",
              "name": "JavaScript"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/getblockbylatestnum": {
      "post": {
        "summary": "GetBlockByLatestNum",
        "description": "Returns a list of block objects.",
        "operationId": "wallet-getblockbylatestnum",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "num": {
                    "type": "integer",
                    "description": "The number of blocks to query",
                    "default": 5,
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getblockbylatestnum', {\"num\":5}, function(data) {\n    console.log(data);\n});",
              "name": "JavaScript"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/gettransactionbyid": {
      "post": {
        "summary": "GetTransactionById",
        "description": "Query transaction information by transaction id.",
        "operationId": "wallet-gettransactionbyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Transaction ID",
                    "default": "7c2d4206c03a883dd9066d620335dc1be272a8dc733cfa3f6d10308faa37facc"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Response": {
                    "value": "// Example API Call Response\n\n{  \n   \"ret\":[  \n      {  \n         \"contractRet\":\"SUCCESS\"\n      }\n   ],\n   \"signature\":[  \n      \"ffbf691a89d95f6ad8175611c7d334c8159b95ff9c1e83872e7670103b185e85faf0a394b23d99581385d38038ab5c4684759c864a5621009f6e95da0a5feab501\"\n   ],\n   \"txID\":\"d0807adb3c5412aa150787b944c96ee898c997debdc27e2f6a643c771edb5933\",\n   \"raw_data\":{  \n      \"contract\":[  \n         {  \n            \"parameter\":{  \n               \"value\":{  \n                  \"amount\":16,\n                  \"asset_name\":\"54726f6e696373\",\n                  \"owner_address\":\"414a5fe0179f2dd9c900194e63d661863cd0ade7b0\",\n                  \"to_address\":\"41718de6b323652d1257437ace160c4f4198aae4e1\"\n               },\n               \"type_url\":\"type.googleapis.com/protocol.TransferAssetContract\"\n            },\n            \"type\":\"TransferAssetContract\"\n         }\n      ],\n      \"ref_block_bytes\":\"6bdd\",\n      \"ref_block_hash\":\"1616edaf3a57fe19\",\n      \"expiration\":1546455678000,\n      \"timestamp\":1546455620175\n   }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "ret": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contractRet": {
                            "type": "string",
                            "example": "SUCCESS"
                          }
                        }
                      }
                    },
                    "signature": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "ffbf691a89d95f6ad8175611c7d334c8159b95ff9c1e83872e7670103b185e85faf0a394b23d99581385d38038ab5c4684759c864a5621009f6e95da0a5feab501"
                      }
                    },
                    "txID": {
                      "type": "string",
                      "example": "d0807adb3c5412aa150787b944c96ee898c997debdc27e2f6a643c771edb5933"
                    },
                    "raw_data": {
                      "type": "object",
                      "properties": {
                        "contract": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "parameter": {
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "amount": {
                                        "type": "integer",
                                        "example": 16,
                                        "default": 0
                                      },
                                      "asset_name": {
                                        "type": "string",
                                        "example": "54726f6e696373"
                                      },
                                      "owner_address": {
                                        "type": "string",
                                        "example": "414a5fe0179f2dd9c900194e63d661863cd0ade7b0"
                                      },
                                      "to_address": {
                                        "type": "string",
                                        "example": "41718de6b323652d1257437ace160c4f4198aae4e1"
                                      }
                                    }
                                  },
                                  "type_url": {
                                    "type": "string",
                                    "example": "type.googleapis.com/protocol.TransferAssetContract"
                                  }
                                }
                              },
                              "type": {
                                "type": "string",
                                "example": "TransferAssetContract"
                              }
                            }
                          }
                        },
                        "ref_block_bytes": {
                          "type": "string",
                          "example": "6bdd"
                        },
                        "ref_block_hash": {
                          "type": "string",
                          "example": "1616edaf3a57fe19"
                        },
                        "expiration": {
                          "type": "integer",
                          "example": 1546455678000,
                          "default": 0
                        },
                        "timestamp": {
                          "type": "integer",
                          "example": 1546455620175,
                          "default": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/gettransactionbyid', {\"value\": \"d5ec749ecc2a615399d8a6c864ea4c74ff9f523c2be0e341ac9be5d47d7c2d62\"}, function(data) {\n    console.log(data);\n});",
              "name": "JavaScript"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/getassetissuelist": {
      "get": {
        "summary": "GetAssetIssueList",
        "description": "Query the list of all the TRC10 tokens.",
        "operationId": "getassetissuelist",
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getnextmaintenancetime": {
      "get": {
        "summary": "GetNextMaintenanceTime",
        "description": "Returns the timestamp of the next voting time in milliseconds.",
        "operationId": "getnextmaintenancetime",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\"num\": 1591099200000}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "num": {
                      "type": "integer",
                      "example": 1591099200000,
                      "default": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getpaginatedassetissuelist": {
      "post": {
        "summary": "GetPaginatedAssetIssueList",
        "description": "Query the list of all the tokens by pagination.Returns a list of Tokens that succeed the Token located at offset.",
        "operationId": "getpaginatedassetissuelist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offset": {
                    "type": "integer",
                    "description": "The index of the start token",
                    "default": 0,
                    "format": "int32"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "The amount of tokens per page",
                    "default": 20,
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/exchangeinject": {
      "post": {
        "summary": "ExchangeInject",
        "description": "Injects capital into the transaction. The purpose of injecting capital into the trading pair is to prevent price fluctuation from affecting the transaction.",
        "operationId": "exchangeinject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Transaction to the creator's address in hexString format",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "exchange_id": {
                    "type": "integer",
                    "description": "Transaction Pair ID",
                    "default": 12,
                    "format": "int32"
                  },
                  "token_id": {
                    "type": "string",
                    "description": "Token ID; usually is the token name, which needs to be in hexString format.",
                    "default": "31303030343837"
                  },
                  "quant": {
                    "type": "integer",
                    "description": "Number of capital injection tokens.",
                    "default": 100,
                    "format": "int32"
                  },
                  "permission_id": {
                    "type": "integer",
                    "description": "Optional,for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/exchangetransaction": {
      "post": {
        "summary": "ExchangeTransaction",
        "description": "Participate the transaction of exchange pair",
        "operationId": "exchangetransaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Trader's wallet address, in hex string format. This wallet contains the tokens you wish to sell, in order to gain the other token.",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "exchange_id": {
                    "type": "integer",
                    "description": "Transaction Pair ID",
                    "default": 12,
                    "format": "int32"
                  },
                  "token_id": {
                    "type": "string",
                    "description": "ID of the sold token, in hexString format. For example, if you wanted to trade TRX for another token, then the TRX id of \"5f\" goes in this parameter.",
                    "default": "31303030343837"
                  },
                  "quant": {
                    "type": "integer",
                    "description": "Quantity of the token being sold. If TRX being sold, need to express in units of SUN.",
                    "default": 100,
                    "format": "int32"
                  },
                  "expected": {
                    "type": "integer",
                    "description": "Expected quantity of the token being purchased.",
                    "default": 10,
                    "format": "int32"
                  },
                  "permission_id": {
                    "type": "integer",
                    "description": "Optional,for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": ""
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/exchangewithdraw": {
      "post": {
        "summary": "ExchangeWithdraw",
        "description": "Withdraws the transaction pair.",
        "operationId": "exchangewithdraw",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Address of the transaction to the creator, in hexString format",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "exchange_id": {
                    "type": "integer",
                    "description": "Transaction Pair ID",
                    "default": 12,
                    "format": "int32"
                  },
                  "token_id": {
                    "type": "string",
                    "description": "Token ID in hexString format; Usually is the token name.",
                    "default": "31303030343837"
                  },
                  "quant": {
                    "type": "integer",
                    "description": "Number of tokens divested.",
                    "default": 100,
                    "format": "int32"
                  },
                  "permission_id": {
                    "type": "string",
                    "description": "Optional,for multi-signature use"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/listexchanges": {
      "get": {
        "summary": "ListExchanges",
        "description": "List all exchange pairs.",
        "operationId": "wallet-listexchanges",
        "parameters": [
          {
            "name": "visible",
            "in": "query",
            "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/validateaddress": {
      "post": {
        "summary": "ValidateAddress",
        "description": "Validates address, returns either true or false.",
        "operationId": "validateaddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Address should be in base58checksum, hexString, or base64 format.",
                    "default": "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\"result\":true}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true,
                      "default": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getexchangebyid": {
      "post": {
        "summary": "GetExchangeById",
        "description": "Query exchange pair based on id",
        "operationId": "wallet-getexchangebyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Transaction Pair ID",
                    "default": 1,
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/proposalapprove": {
      "post": {
        "summary": "ProposalApprove",
        "description": "Approves proposed transaction.",
        "operationId": "proposalapprove",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Approver address",
                    "default": "TUeTYVYJFfmBj3hVyopAZB97yc432Aay4N"
                  },
                  "proposal_id": {
                    "type": "integer",
                    "description": "Proposal ID",
                    "default": 89,
                    "format": "int32"
                  },
                  "is_add_approval": {
                    "type": "boolean",
                    "description": "Approved",
                    "default": true
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/proposalapprove', {\"owner_address\" : \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\":1, \"is_add_approval\":true}, function(data) {\n    console.log(data);\n});"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/getproposalbyid": {
      "post": {
        "summary": "GetProposalById",
        "description": "Queries proposal based on ID and returns proposal details.",
        "operationId": "getproposalbyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "default": 1,
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getproposalbyid', {\"id\":1}, function(data) {\n    console.log(data);\n});"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/proposalcreate": {
      "post": {
        "summary": "ProposalCreate",
        "description": "Creates a proposal transaction.",
        "operationId": "proposalcreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Address of the transaction creator",
                    "default": "TCuM8e98jmPwT1RU2jW7dekUC5HpXbGzFG"
                  },
                  "parameters": {
                    "type": "string",
                    "description": "Proposal parameters",
                    "default": "[{\"key\": 0,\"value\": 100000},{\"key\": 1,\"value\": 2}]",
                    "format": "json"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/proposalcreate', {\"owner_address\":\"419844F7600E018FD0D710E2145351D607B3316CE9\",\"parameters\":[{\"key\": 0,\"value\": 100000},{\"key\": 1,\"value\": 2}]}, function(data) {\n    console.log(data);\n});"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/listproposals": {
      "get": {
        "summary": "ListProposals",
        "description": "List all proposals.",
        "operationId": "wallet-listproposals",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/listproposals', function(data) {\n    console.log(data);\n});"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/proposaldelete": {
      "post": {
        "summary": "ProposalDelete",
        "description": "Deletes Proposal Transaction.",
        "operationId": "proposaldelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Address of proposal owner.",
                    "default": "TCuM8e98jmPwT1RU2jW7dekUC5HpXbGzFG"
                  },
                  "proposal_id": {
                    "type": "integer",
                    "description": "Proposal ID",
                    "default": 89,
                    "format": "int32"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/proposaldelete', {\"owner_address\" : \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\":1}, function(data) {\n    console.log(data);\n});"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/getaccount": {
      "post": {
        "summary": "GetAccount",
        "description": "Query information about an account, including TRX balance, TRC-10 balances, stake information and vote information and permissions etc.",
        "operationId": "account-getaccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "address should be converted to a hex string",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/gettransactionsign": {
      "post": {
        "summary": "GetTransactionSign",
        "description": "Sign the transaction, it is recommended to sign transactions offline.",
        "operationId": "gettransactionsign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "transaction",
                  "privateKey"
                ],
                "properties": {
                  "transaction": {
                    "type": "object",
                    "description": "Transaction is a contract created by http api",
                    "properties": {
                      "txID": {
                        "type": "string"
                      },
                      "visible": {
                        "type": "boolean"
                      },
                      "raw_data": {
                        "type": "string",
                        "default": "{\"contract\":[{\"parameter\":{\"value\":{\"amount\":1000,\"owner_address\":\"41608f8da72479edc7dd921e4c30bb7e7cddbe722e\",\"to_address\":\"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\"},\"type_url\":\"type.googleapis.com/protocol.TransferContract\"},\"type\":\"TransferContract\"}],\"ref_block_bytes\":\"5e4b\",\"ref_block_hash\":\"47c9dc89341b300d\",\"expiration\":1591089627000,\"timestamp\":1591089567635}",
                        "format": "json"
                      },
                      "raw_data_hex": {
                        "type": "string",
                        "default": "0a025e4b220847c9dc89341b300d40f8fed3a2a72e5a66080112620a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412310a1541608f8da72479edc7dd921e4c30bb7e7cddbe722e121541e9d79cc47518930bc322d9bf7cddd260a0260a8d18e8077093afd0a2a72e"
                      },
                      "signature": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "privateKey": {
                    "type": "string",
                    "description": "privateKey is the user private key",
                    "default": "your private key"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/broadcasttransaction": {
      "post": {
        "summary": "BroadcastTransaction",
        "description": "Broadcast the signed transaction",
        "operationId": "broadcasttransaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "RAW_BODY"
                ],
                "properties": {
                  "RAW_BODY": {
                    "type": "object",
                    "properties": {
                      "txID": {
                        "type": "string"
                      },
                      "visible": {
                        "type": "boolean"
                      },
                      "raw_data": {
                        "type": "string",
                        "default": "{\"contract\":[{\"parameter\":{\"value\":{\"amount\":1000,\"owner_address\":\"41608f8da72479edc7dd921e4c30bb7e7cddbe722e\",\"to_address\":\"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\"},\"type_url\":\"type.googleapis.com/protocol.TransferContract\"},\"type\":\"TransferContract\"}],\"ref_block_bytes\":\"5e4b\",\"ref_block_hash\":\"47c9dc89341b300d\",\"expiration\":1591089627000,\"timestamp\":1591089567635}",
                        "format": "json"
                      },
                      "raw_data_hex": {
                        "type": "string",
                        "default": "0a025e4b220847c9dc89341b300d40f8fed3a2a72e5a66080112620a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412310a1541608f8da72479edc7dd921e4c30bb7e7cddbe722e121541e9d79cc47518930bc322d9bf7cddd260a0260a8d18e8077093afd0a2a72e"
                      },
                      "signature": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Response": {
                    "value": "// Example Output\n\n{\"result\": true}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "example": true,
                      "default": true
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/createaccount": {
      "post": {
        "summary": "CreateAccount",
        "description": "Activate an account. Uses an already activated account to activate a new account. Users have to generate an account locally with wallet-cli or others SDKs like TronWeb, and then use this API to activate the account generated, or just simply transfer TRX to it.",
        "operationId": "account-createaccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner_address is an activated account，converted to a hex String.If the owner_address has enough bandwidth obtained by freezing TRX, then creating an account will only consume bandwidth , otherwise, 0.1 TRX will be burned to pay for bandwidth, and at the same time, 1 TRX will be required to be created.",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "account_address": {
                    "type": "string",
                    "description": "account_address is the address of the new account, converted to a hex string, this address needs to be calculated in advance",
                    "default": "TFgY1uN8buRxAtV2r6Zy5sG3ACko6pJT1y"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  },
                  "permission_id": {
                    "type": "integer",
                    "description": "Optional,for multi-signature use",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/transferasset": {
      "post": {
        "summary": "TransferAsset",
        "description": "Transfer TRC10 token.",
        "operationId": "transferasset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "to_address": {
                    "type": "string",
                    "description": "receiving address, default hexString",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "asset_name": {
                    "type": "string",
                    "description": "Token id, default hexString",
                    "default": "31303030303031"
                  },
                  "amount": {
                    "type": "integer",
                    "default": null,
                    "format": "int64"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  },
                  "extra_data": {
                    "type": "string",
                    "description": "Optional,  totes on the transaction, HEX format"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/unfreezebalance": {
      "post": {
        "summary": "UnfreezeBalance",
        "description": "Unstake the TRX staked during Stake1.0, release the obtained bandwidth or energy and TP. This operation will cause automatically cancel all votes.",
        "operationId": "account-resources-unfreezebalance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Stake TRX for 'BANDWIDTH' or 'ENERGY'",
                    "default": "BANDWIDTH"
                  },
                  "receiver_address": {
                    "type": "string",
                    "description": "Optional,the address that will lose the resource, default hexString"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/createwitness": {
      "post": {
        "summary": "CreateWitness",
        "description": "Apply to become a super representative candidate.",
        "operationId": "createwitness",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "url": {
                    "type": "string",
                    "description": "Website url, default hexString",
                    "default": "007570646174654e616d6531353330363038383733343633"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/votewitnessaccount": {
      "post": {
        "summary": "VoteWitnessAccount",
        "description": "Vote for super representatives",
        "operationId": "votewitnessaccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "votes": {
                    "type": "array",
                    "description": "'vote_address' stands for the address of the witness you want to vote, default hexString, 'vote_count' stands for the number of votes you want to vote",
                    "items": {
                      "properties": {
                        "vote_address": {
                          "type": "string",
                          "default": "41e552f6487585c2b58bc2c9bb4492bc1f17132cd0"
                        },
                        "vote_count": {
                          "type": "integer",
                          "default": 0,
                          "format": "int32"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/createassetissue": {
      "post": {
        "summary": "CreateAssetIssue",
        "description": "Issue a TRC10 token.",
        "operationId": "createassetissue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "name": {
                    "type": "string",
                    "description": "Token name, default hexString",
                    "default": "0x6173736574497373756531353330383934333132313538"
                  },
                  "abbr": {
                    "type": "string",
                    "default": "0x6162627231353330383934333132313538"
                  },
                  "total_supply": {
                    "type": "integer",
                    "description": "Token total supply",
                    "format": "int64"
                  },
                  "trx_num": {
                    "type": "integer",
                    "description": "Define the price by the ratio of trx_num/num(The unit of 'trx_num' is SUN)",
                    "format": "int64"
                  },
                  "num": {
                    "type": "integer",
                    "description": "Define the price by the ratio of trx_num/num",
                    "format": "int64"
                  },
                  "start_time": {
                    "type": "integer",
                    "description": "ICO start time",
                    "format": "int64"
                  },
                  "end_time": {
                    "type": "integer",
                    "description": "ICO end time",
                    "format": "int64"
                  },
                  "description": {
                    "type": "string",
                    "description": "Token description, default hexString",
                    "default": "0x4578616d706c654465736372697074696f6e"
                  },
                  "url": {
                    "type": "string",
                    "description": "Token official website url, default hexString",
                    "default": "0x7777772e6578616d706c652e636f6d"
                  },
                  "free_asset_net_limit": {
                    "type": "integer",
                    "description": "Token free asset net limit",
                    "format": "int64"
                  },
                  "public_free_asset_net_limit": {
                    "type": "integer",
                    "description": "Token public free asset net limit",
                    "format": "int64"
                  },
                  "frozen_supply": {
                    "type": "string",
                    "description": "Token frozen supply",
                    "default": "{\"frozen_amount\":1,\"frozen_days\":2}",
                    "format": "json"
                  },
                  "precision": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/triggersmartcontract": {
      "post": {
        "summary": "TriggerSmartContract",
        "description": "Returns TransactionExtention, which contains the unsigned Transaction",
        "operationId": "triggersmartcontract",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner_address",
                  "contract_address",
                  "fee_limit"
                ],
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Address that triggers the contract, converted to a hex string.",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "contract_address": {
                    "type": "string",
                    "description": "Contract address, converted to a hex string",
                    "default": "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs"
                  },
                  "function_selector": {
                    "type": "string",
                    "description": "Function call, must not be left blank",
                    "default": "transfer(address,uint256)"
                  },
                  "parameter": {
                    "type": "string",
                    "description": "Parameter encoding needs to be in accordance with the ABI rules, the rules are more complicated, users can use the ethers library to encode,For details, please refer to the document-Guide-Smart Contract-Best Practice-Parameter Encoding and Decoding.",
                    "default": "00000000000000000000004115208EF33A926919ED270E2FA61367B2DA3753DA0000000000000000000000000000000000000000000000000000000000000032"
                  },
                  "data": {
                    "type": "string",
                    "description": "The data for interacting with smart contracts, including the contract function and parameters. You can choose to use this field, or you can choose to use function_selector and parameter for contract interaction. When both of data and function_selector exist, function_selector is preferred"
                  },
                  "fee_limit": {
                    "type": "integer",
                    "description": "Maximum TRX consumption, measured in SUN (1 TRX = 1,000,000 SUN).",
                    "default": 1000000000,
                    "format": "int32"
                  },
                  "call_value": {
                    "type": "integer",
                    "description": "Amount of TRX transferred with this transaction, measured in SUN (1 TRX = 1,000,000 SUN).",
                    "default": 0,
                    "format": "int64"
                  },
                  "call_token_value": {
                    "type": "integer",
                    "description": "Amount of TRC10 token transferred with this transaction",
                    "format": "int64"
                  },
                  "token_id": {
                    "type": "integer",
                    "description": "TRC10 token id",
                    "format": "int64"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/unfreezeasset": {
      "post": {
        "summary": "UnfreezeAsset",
        "description": "Unstake a token that has passed the minimum freeze duration.",
        "operationId": "unfreezeasset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/withdrawbalance": {
      "post": {
        "summary": "WithdrawBalance",
        "description": "Super Representative or user withdraw rewards, usable every 24 hours.\nSuper representatives can withdraw the balance from the account allowance into the account balance,\nUsers can claim the voting reward from the SRs and deposit into his account balance.",
        "operationId": "withdrawbalance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Super representative or user address",
                    "default": "TGj1Ej1qRzL9feLTLhjwgxXF4Ct6GTWg2U"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/freezebalance": {
      "post": {
        "summary": "FreezeBalance",
        "description": "This interface has been deprecated, please use [FreezeBalanceV2](/reference/freezebalancev2-1) to stake TRX to obtain resources.",
        "operationId": "account-resources-freezebalance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "frozen_balance": {
                    "type": "integer",
                    "description": "TRX stake amount, the unit is sun",
                    "default": 10000000,
                    "format": "int64"
                  },
                  "frozen_duration": {
                    "type": "integer",
                    "description": "Lock-up duration for this stake, now the value can only be 3 days. It is not allowed to unstake within 3 days after the stake. You can unstake TRX after the 3 lock-up days",
                    "default": 3,
                    "format": "int32"
                  },
                  "resource": {
                    "type": "string",
                    "description": "TRX stake type, 'BANDWIDTH' or 'ENERGY'",
                    "default": "ENERGY"
                  },
                  "receiver_address": {
                    "type": "string",
                    "description": "Optional,the address that will receive the resource, default hexString"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/participateassetissue": {
      "post": {
        "summary": "ParticipateAssetIssue",
        "description": "Participate in an asset issue.",
        "operationId": "participateassetissue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "to_address": {
                    "type": "string",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "owner_address": {
                    "type": "string",
                    "description": "The participant address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "The number of trx participating in token issuance",
                    "format": "int64"
                  },
                  "asset_name": {
                    "type": "string",
                    "description": "Token id, default hexString",
                    "default": "1000001031303030303031"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getcontract": {
      "post": {
        "summary": "GetContract",
        "description": "Queries a contract's information from the blockchain, including the bytecode of the contract, ABI, configuration parameters, etc.",
        "operationId": "wallet-getcontract",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Contract address, converted to a hex string.",
                    "default": "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/easytransferbyprivate": {
      "post": {
        "summary": "EasyTransferByPrivate",
        "description": "This interface has been deprecated.",
        "operationId": "easytransferbyprivate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "privateKey",
                  "toAddress",
                  "amount"
                ],
                "properties": {
                  "privateKey": {
                    "type": "string",
                    "description": "passPhrase is the private key in hex string format"
                  },
                  "toAddress": {
                    "type": "string",
                    "description": "toAddress is the recipient address, converted into a hex string;"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "amount is the amount of TRX to transfer in SUN.",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/exchangecreate": {
      "post": {
        "summary": "ExchangeCreate",
        "description": "Creates a trading pair.",
        "operationId": "exchangecreate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "first_token_id": {
                    "type": "string",
                    "description": "The first token's id, default hexString",
                    "default": "31303030343837"
                  },
                  "first_token_balance": {
                    "type": "integer",
                    "description": "The first token's balance",
                    "default": 100,
                    "format": "int32"
                  },
                  "second_token_id": {
                    "type": "string",
                    "description": "The second token's id, default hexString",
                    "default": "31303030303031"
                  },
                  "second_token_balance": {
                    "type": "integer",
                    "description": "The second token's balance",
                    "default": 100,
                    "format": "int32"
                  },
                  "permission_id": {
                    "type": "integer",
                    "description": "Optional,for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/deploycontract": {
      "post": {
        "summary": "DeployContract",
        "description": "Deploys a contract. Returns TransactionExtention, which contains an unsigned transaction.",
        "operationId": "wallet-deploycontract",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "abi": {
                    "type": "string",
                    "description": "Smart Contract's Application Binary Interface",
                    "default": "\"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\"",
                    "format": "json"
                  },
                  "bytecode": {
                    "type": "string",
                    "description": "The compiled contract's identifier, used to interact with the Virtual Machine.",
                    "default": "608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029"
                  },
                  "fee_limit": {
                    "type": "integer",
                    "description": "Maximum TRX consumption, measured in SUN (1 TRX = 1,000,000 SUN).",
                    "format": "int32"
                  },
                  "parameter": {
                    "type": "string",
                    "description": "Parameter passed to the constructor of the contract. Call the virtual machine format of the parameter [1, 2], use the js tool provided by remix, convert the parameter array [1, 2] called by the contract caller into the parameter format required by the virtual machine."
                  },
                  "origin_energy_limit": {
                    "type": "integer",
                    "description": "The max energy which will be consumed by the owner in the process of execution or creation of the contract, is an integer which should be greater than 0.",
                    "format": "int32"
                  },
                  "owner_address": {
                    "type": "string",
                    "description": "Contract owner address, converted to a hex string",
                    "default": "TJmmqjb1DK9TTZbQXzRQ2AuA94z4gKAPFh"
                  },
                  "name": {
                    "type": "string",
                    "description": "Contract name",
                    "default": "SomeContract"
                  },
                  "call_value": {
                    "type": "integer",
                    "description": "Amount of TRX transferred with this transaction, measured in SUN (1TRX = 1,000,000 SUN)",
                    "format": "int32"
                  },
                  "consume_user_resource_percent": {
                    "type": "integer",
                    "description": "The same as User Pay Ratio. The percentage of resources specified for users who use this contract. This field accepts integers between [0, 100]. If it is 0, it means the user does not consume resources until the developer resources are exhausted. However, it is strongly recommended to set the value between 1 and 99 (inclusive). This is prevent the contract developer from potential malicious infinite loop time out attacks.",
                    "format": "int32"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional. Whehter the address is in base58 format.",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/updatesetting": {
      "post": {
        "summary": "UpdateSetting",
        "description": "Update the consume_user_resource_percent parameter of a smart contract",
        "operationId": "wallet-updatesetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner_address",
                  "contract_address",
                  "consume_user_resource_percent"
                ],
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Transaction creator address, in hex string format.",
                    "default": "TSNEe5Tf4rnc9zPMNXfaTF5fZfHDDH8oyW"
                  },
                  "contract_address": {
                    "type": "string",
                    "description": "The address of the contract to be modified, in hex string format.",
                    "default": "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs"
                  },
                  "consume_user_resource_percent": {
                    "type": "integer",
                    "description": "Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up",
                    "default": 10,
                    "format": "int32"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getnodeinfo": {
      "get": {
        "summary": "GetNodeInfo",
        "description": "Query Node Information. Returns information about current state of node.",
        "operationId": "wallet-getnodeinfo",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/updateenergylimit": {
      "post": {
        "summary": "UpdateEnergyLimit",
        "description": "Update the origin_energy_limit parameter of a smart contract",
        "operationId": "wallet-updateenergylimit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Transaction creator address, in hex string format.",
                    "default": "TSNEe5Tf4rnc9zPMNXfaTF5fZfHDDH8oyW"
                  },
                  "contract_address": {
                    "type": "string",
                    "description": "The address of the contract to be modified, in hex string format.",
                    "default": "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs"
                  },
                  "origin_energy_limit": {
                    "type": "integer",
                    "description": "Adjusted upper limit of energy provided by smart contract deplovers in one transaction.",
                    "default": 100000000,
                    "format": "int32"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/easytransferasset": {
      "post": {
        "summary": "EasyTransferAsset",
        "description": "This interface has been deprecated.",
        "operationId": "easytransferasset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "passPhrase": {
                    "type": "string",
                    "description": "Password, default hexString"
                  },
                  "toAddress": {
                    "type": "string",
                    "description": "To address, default hexString",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "assetId": {
                    "type": "string",
                    "description": "Token id",
                    "default": "1000001"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "Transfer token amount,the unit is the smallest unit.",
                    "format": "int64"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional, Whether the address is in base58 format.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/easytransferassetbyprivate": {
      "post": {
        "summary": "EasyTransferAssetByPrivate",
        "description": "This interface has been deprecated.",
        "operationId": "easytransferassetbyprivate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "privateKey": {
                    "type": "string",
                    "description": "Private key, default hexString",
                    "default": "D95611A9AF2A2A45359106222ED1AFED48853D9A44DEFF8DC7913F5CBA727366"
                  },
                  "toAddress": {
                    "type": "string",
                    "description": "To address, default hexString",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "assetId": {
                    "type": "string",
                    "description": "Token id",
                    "default": "1000001"
                  },
                  "amount": {
                    "type": "integer",
                    "description": "Token transfer amount",
                    "format": "int64"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional, Whether the address is in base58 format.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getdelegatedresource": {
      "post": {
        "summary": "GetDelegatedResource",
        "description": "Returns all resources delegations during stake1.0 phase from an account to another account. The fromAddress can be retrieved from the GetDelegatedResourceAccountIndex API.",
        "operationId": "getdelegatedresource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fromAddress",
                  "toAddress"
                ],
                "properties": {
                  "fromAddress": {
                    "type": "string",
                    "description": "Energy from address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "toAddress": {
                    "type": "string",
                    "description": "Energy delegation information",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/gettransactioninfobyid": {
      "post": {
        "summary": "GetTransactionInfoById",
        "description": "Query the transaction fee, block height by transaction id",
        "operationId": "gettransactioninfobyid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Transaction hash, i.e. transaction id.",
                    "default": "7c2d4206c03a883dd9066d620335dc1be272a8dc733cfa3f6d10308faa37facc"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"id\": \"d0807adb3c5412aa150787b944c96ee898c997debdc27e2f6a643c771edb5933\",\n  \"fee\": 2790,\n  \"blockNumber\": 5467102,\n  \"blockTimeStamp\": 1546455621000,\n  \"contractResult\": [\n    \"\"\n  ],\n  \"receipt\": {\n    \"net_fee\": 2790\n  }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "d0807adb3c5412aa150787b944c96ee898c997debdc27e2f6a643c771edb5933"
                    },
                    "fee": {
                      "type": "integer",
                      "example": 2790,
                      "default": 0
                    },
                    "blockNumber": {
                      "type": "integer",
                      "example": 5467102,
                      "default": 0
                    },
                    "blockTimeStamp": {
                      "type": "integer",
                      "example": 1546455621000,
                      "default": 0
                    },
                    "contractResult": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": ""
                      }
                    },
                    "receipt": {
                      "type": "object",
                      "properties": {
                        "net_fee": {
                          "type": "integer",
                          "example": 2790,
                          "default": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getdelegatedresourceaccountindex": {
      "post": {
        "summary": "GetDelegatedResourceAccountIndex",
        "description": "Query the resource delegation by an account during stake1.0 phase. i.e. list all addresses that have delegated resources to an account.",
        "operationId": "getdelegatedresourceaccountindex",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/clearabi": {
      "post": {
        "summary": "ClearAbi",
        "description": "To clear the ABI info of a smart contract.",
        "operationId": "clearabi",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address of the smart contract. If visible=true, use base58check format, otherwise use hex format.",
                    "default": "TSNEe5Tf4rnc9zPMNXfaTF5fZfHDDH8oyW"
                  },
                  "contract_address": {
                    "type": "string",
                    "description": "Smart contract address. If visible=true, use base58check format, otherwise use hex format.",
                    "default": "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/triggerconstantcontract": {
      "post": {
        "summary": "TriggerConstantContract",
        "description": "Invoke the readonly function (modified by the `view` or `pure` modifier) of a contract for contract data query; or Invoke the non-readonly function of a  contract for predicting whether the transaction can be successfully executed and estimating the energy consumption; or estimate the energy consumption of contract deployment",
        "operationId": "triggerconstantcontract",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address that triggers the contract. If visible=true, use base58check format, otherwise use hex format. For constant call you can use the all-zero address.",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "contract_address": {
                    "type": "string",
                    "description": "Smart contract address. If visible=true, use base58check format, otherwise use hex format.",
                    "default": "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs"
                  },
                  "function_selector": {
                    "type": "string",
                    "description": "Function call, must not be left blank.",
                    "default": "balanceOf(address)"
                  },
                  "parameter": {
                    "type": "string",
                    "description": "Parameter encoding needs to be in accordance with the ABI rules, the rules are more complicated, users can use the ethers library to encode,For details, please refer to the document-Guide-Smart Contract-Best Practice-Parameter Encoding and Decoding.",
                    "default": "000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c"
                  },
                  "data": {
                    "type": "string",
                    "description": "The bytecode of the contract or the data for interacting with smart contracts, including the contract function and parameters. You can choose to use this field, or you can choose to use function_selector and parameter for contract interaction. When both of data and  function_selector exist, function_selector is preferred"
                  },
                  "call_value": {
                    "type": "integer",
                    "description": "Amount of TRX transferred to the contract with this transaction, the unit is sun. This field may be used when estimating energy consumption.",
                    "format": "int64"
                  },
                  "call_token_value": {
                    "type": "integer",
                    "description": "Amount of TRC10 token transferred with this transaction",
                    "format": "int64"
                  },
                  "token_id": {
                    "type": "integer",
                    "description": "TRC10 token id",
                    "format": "int64"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"result\":{\"result\":true},\n  // constant_result should be parsed by corresponding ABI\n  \"constant_result\":[\"000000000000000000000000000000000000000000000000000009a1832a6361\"]\n // ...\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "boolean",
                          "example": true,
                          "default": true
                        }
                      }
                    },
                    "constant_result": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "000000000000000000000000000000000000000000000000000009a1832a6361"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/updatewitness": {
      "post": {
        "summary": "UpdateWitness",
        "description": "Edit the URL of the SR's official website.",
        "operationId": "updatewitness",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "update_url": {
                    "type": "string",
                    "description": "Website url, default hexString"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getBrokerage": {
      "post": {
        "summary": "GetBrokerage",
        "description": "Get SR brokerage ratio",
        "operationId": "wallet-getbrokerage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Super representative's account address",
                    "default": "TGj1Ej1qRzL9feLTLhjwgxXF4Ct6GTWg2U"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional, whether the address is in base58 format.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getReward": {
      "post": {
        "summary": "GetReward",
        "description": "Get the rewards that a SR or a user has not yet withdrawn.",
        "operationId": "wallet-getreward",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "User's address",
                    "default": "TGj1Ej1qRzL9feLTLhjwgxXF4Ct6GTWg2U"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/updateBrokerage": {
      "post": {
        "summary": "UpdateBrokerage",
        "description": "Update the SR's brokerage setting.",
        "operationId": "wallet-updatebrokerage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Super representative's account address",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "brokerage": {
                    "type": "integer",
                    "description": "The brokerage ratio of the super representative, for example: 20 means 20%, 100 means 100%",
                    "default": 20,
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getchainparameters": {
      "get": {
        "summary": "GetChainParameters",
        "description": "All parameters that the blockchain committee can set",
        "operationId": "wallet-getchainparameters",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getaccountresource": {
      "post": {
        "summary": "GetAccountResource",
        "description": "Query the resource information of an account(bandwidth,energy,etc)",
        "operationId": "getaccountresource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Address",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/gettransactioninfobyblocknum": {
      "post": {
        "summary": "GetTransactionInfoByBlockNum",
        "description": "",
        "operationId": "gettransactioninfobyblocknum",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "num": {
                    "type": "integer",
                    "description": "Block height",
                    "default": 1000000,
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/broadcasthex": {
      "post": {
        "summary": "BroadcastHex",
        "description": "Broadcast the protobuf encoded transaction hex string after sign",
        "operationId": "broadcasthex",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "transaction"
                ],
                "properties": {
                  "transaction": {
                    "type": "string",
                    "description": "Transaction hex after sign",
                    "default": "0A8A010A0202DB2208C89D4811359A28004098A4E0A6B52D5A730802126F0A32747970652E676F6F676C65617069732E636F6D2F70726F746F636F6C2E5472616E736665724173736574436F6E747261637412390A07313030303030311215415A523B449890854C8FC460AB602DF9F31FE4293F1A15416B0580DA195542DDABE288FEC436C7D5AF769D24206412418BF3F2E492ED443607910EA9EF0A7EF79728DAAAAC0EE2BA6CB87DA38366DF9AC4ADE54B2912C1DEB0EE6666B86A07A6C7DF68F1F9DA171EEE6A370B3CA9CBBB00"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/accountpermissionupdate": {
      "post": {
        "summary": "AccountPermissionUpdate",
        "description": "Update the account's permission.",
        "operationId": "accountpermissionupdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "owner address",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "actives": {
                    "type": "string",
                    "description": "active permission",
                    "default": "[{ \t\"type\": 2, \t\"permission_name\": \"active0\", \t\"threshold\": 2, \t\"operations\": \"7fff1fc0037e0000000000000000000000000000000000000000000000000000\", \t\"keys\": [{ \t\t\"address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \t\t\"weight\": 1 \t}, { \t\t\"address\": \"TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1\", \t\t\"weight\": 1 \t}] }]",
                    "format": "json"
                  },
                  "owner": {
                    "type": "string",
                    "description": "owner permission",
                    "default": "{ \t\"type\": 0, \t\"permission_name\": \"owner\", \t\"threshold\":1, \t\"keys\": [{ \t\t\"address\": \"TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g\", \t\t\"weight\": 1 \t}] }",
                    "format": "json"
                  },
                  "witness": {
                    "type": "string",
                    "description": "witness permission",
                    "format": "json"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getspendingkey": {
      "get": {
        "summary": "GetSpendingKey",
        "description": "Note:To ensure security, Trongrid has disabled this interface service, please use the service provided by the local node.",
        "operationId": "getspendingkey",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"value\": \"09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getakfromask": {
      "post": {
        "summary": "GetAkFromAsk",
        "description": "Note:To ensure security, Trongrid has disabled this interface service, please use the service provided by the local node.",
        "operationId": "getakfromask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "default": "23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"value\": \"72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getexpandedspendingkey": {
      "post": {
        "summary": "GetExpandedSpendingKey",
        "description": "Note:To ensure security, Trongrid has disabled this interface service, please use the service provided by the local node.",
        "operationId": "getexpandedspendingkey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "HEX of Spending Key",
                    "default": "09124de6a534661ef1cfad0335832445a3b83c08e885881a68a52cf4dc735e68"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"ask\": \"23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705\",\n    \"nsk\": \"da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a\",\n    \"ovk\": \"e73f5383fdeacbb282db951afba01e607916c8106b316c55544fac84b2efbdc4\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "ask": {
                      "type": "string",
                      "example": "23d11537676610c287ffcd1bc33d650df37fc90d13bb65356fbc9045cfb91705"
                    },
                    "nsk": {
                      "type": "string",
                      "example": "da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a"
                    },
                    "ovk": {
                      "type": "string",
                      "example": "e73f5383fdeacbb282db951afba01e607916c8106b316c55544fac84b2efbdc4"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getnkfromnsk": {
      "post": {
        "summary": "GetNkFromNsk",
        "description": "",
        "operationId": "getnkfromnsk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "value"
                ],
                "properties": {
                  "value": {
                    "type": "string",
                    "default": "da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"value\": \"2d817ea2e005e174d9291d0bd0605e11cb79e3f5855780521bc300d0636a58df\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "2d817ea2e005e174d9291d0bd0605e11cb79e3f5855780521bc300d0636a58df"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getnewshieldedaddress": {
      "get": {
        "summary": "GetNewShieldedAddress",
        "description": "Note:To ensure security, Trongrid has disabled this interface service, please use the service provided by the local node.",
        "operationId": "getnewshieldedaddress",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"sk\": \"0bfc211444fa877ba546ffb3a64e8b7aa58dd7bdd23a7b22166e9da923add0e6\",\n    \"ask\": \"264c351e5a154555b1ec7822f9bfc0faa5ced9d75b17ed1552699a20b18f7c07\",\n    \"nsk\": \"ebd5bf67f68de464c8a109b389ff4d07912ebe11e8b3d034cf505b35c8d5a907\",\n    \"ovk\": \"a8fa18b039e2cd8aeb04c8cf299b2bbc43cb5ab4dd67eec8884e3563223e5908\",\n    \"ak\": \"0648c0b20fa5eab112d466f75b174d1c142bf35318d2f50d63c6b3b343c8c397\",\n    \"nk\": \"a45852bb5b9e933266d5fab6062baa456b149329f8081817ef868923f87b2f9d\",\n    \"ivk\": \"9c3eacfe786e67c6f3b567cfcf129dcfdc21347ce6f192cc3ca1e994df570c05\",\n    \"d\": \"987adf3b4d8da446327d17\",\n    \"pkD\": \"09f3c4576c4f836b3472a6a5738606866607a6ffcd1c7299e31ec40455b1cd35\",\n    \"payment_address\": \"ztron1npad7w6d3kjyvvnazuyl83zhd38cx6e5w2n22uuxq6rxvpaxllx3cu5euv0vgpz4k8xn2rsga28\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "sk": {
                      "type": "string",
                      "example": "0bfc211444fa877ba546ffb3a64e8b7aa58dd7bdd23a7b22166e9da923add0e6"
                    },
                    "ask": {
                      "type": "string",
                      "example": "264c351e5a154555b1ec7822f9bfc0faa5ced9d75b17ed1552699a20b18f7c07"
                    },
                    "nsk": {
                      "type": "string",
                      "example": "ebd5bf67f68de464c8a109b389ff4d07912ebe11e8b3d034cf505b35c8d5a907"
                    },
                    "ovk": {
                      "type": "string",
                      "example": "a8fa18b039e2cd8aeb04c8cf299b2bbc43cb5ab4dd67eec8884e3563223e5908"
                    },
                    "ak": {
                      "type": "string",
                      "example": "0648c0b20fa5eab112d466f75b174d1c142bf35318d2f50d63c6b3b343c8c397"
                    },
                    "nk": {
                      "type": "string",
                      "example": "a45852bb5b9e933266d5fab6062baa456b149329f8081817ef868923f87b2f9d"
                    },
                    "ivk": {
                      "type": "string",
                      "example": "9c3eacfe786e67c6f3b567cfcf129dcfdc21347ce6f192cc3ca1e994df570c05"
                    },
                    "d": {
                      "type": "string",
                      "example": "987adf3b4d8da446327d17"
                    },
                    "pkD": {
                      "type": "string",
                      "example": "09f3c4576c4f836b3472a6a5738606866607a6ffcd1c7299e31ec40455b1cd35"
                    },
                    "payment_address": {
                      "type": "string",
                      "example": "ztron1npad7w6d3kjyvvnazuyl83zhd38cx6e5w2n22uuxq6rxvpaxllx3cu5euv0vgpz4k8xn2rsga28"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/createshieldedcontractparameters": {
      "post": {
        "summary": "CreateShieldedContractParameters",
        "description": "Note:To ensure security, Trongrid has disabled this interface service, please use the service provided by the local node.",
        "operationId": "createshieldedcontractparameters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "shielded_TRC20_contract_address"
                ],
                "properties": {
                  "ovk": {
                    "type": "string"
                  },
                  "from_amount": {
                    "type": "string"
                  },
                  "to_amount": {
                    "type": "string"
                  },
                  "transparent_to_address": {
                    "type": "string"
                  },
                  "shielded_TRC20_contract_address": {
                    "type": "string"
                  },
                  "shielded_receives": {
                    "type": "object",
                    "properties": {}
                  },
                  "shielded_spends": {
                    "type": "object",
                    "properties": {}
                  },
                  "ask": {
                    "type": "string"
                  },
                  "nsk": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/scanshieldedtrc20notesbyovk": {
      "post": {
        "summary": "ScanShieldedTrc20NotesByOvk",
        "description": "Scan outgoing notes(spent).",
        "operationId": "scanshieldedtrc20notesbyovk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "start_block_index",
                  "end_block_index",
                  "shielded_TRC20_contract_address",
                  "ovk"
                ],
                "properties": {
                  "start_block_index": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "end_block_index": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "shielded_TRC20_contract_address": {
                    "type": "string"
                  },
                  "ovk": {
                    "type": "string"
                  },
                  "visible": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getzenpaymentaddress": {
      "post": {
        "summary": "GetZenPaymentAddress",
        "description": "",
        "operationId": "getzenpaymentaddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ivk",
                  "d"
                ],
                "properties": {
                  "ivk": {
                    "type": "string"
                  },
                  "d": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"pkD\": \"297198e7d4a024a3b5ef9b68ed15e7463fbf03e6aa590aa551d7bd0c1cfa828d\",\n    \"payment_address\": \"ztron1m445gx74mjuuyhkyru5hrx886jszfga4a7dk3mg4uarrl0cru649jz4928tm6rqul2pg645hqv5\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "pkD": {
                      "type": "string",
                      "example": "297198e7d4a024a3b5ef9b68ed15e7463fbf03e6aa590aa551d7bd0c1cfa828d"
                    },
                    "payment_address": {
                      "type": "string",
                      "example": "ztron1m445gx74mjuuyhkyru5hrx886jszfga4a7dk3mg4uarrl0cru649jz4928tm6rqul2pg645hqv5"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/isshieldedtrc20contractnotespent": {
      "post": {
        "summary": "IsShieldedTrc20ContractNoteSpent",
        "description": "",
        "operationId": "isshieldedtrc20contractnotespent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "note",
                  "ak",
                  "nk",
                  "position",
                  "shielded_TRC20_contract_address"
                ],
                "properties": {
                  "note": {
                    "type": "object",
                    "properties": {}
                  },
                  "ak": {
                    "type": "string"
                  },
                  "nk": {
                    "type": "string"
                  },
                  "position": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "shielded_TRC20_contract_address": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\"is_spent\": true}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "is_spent": {
                      "type": "boolean",
                      "example": true,
                      "default": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/scanshieldedtrc20notesbyivk": {
      "post": {
        "summary": "ScanShieldedTrc20NotesByIvk",
        "description": "Scan outgoing notes.",
        "operationId": "scanshieldedtrc20notesbyivk",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "start_block_index",
                  "end_block_index",
                  "shielded_TRC20_contract_address",
                  "ivk",
                  "ak",
                  "nk"
                ],
                "properties": {
                  "start_block_index": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "end_block_index": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "shielded_TRC20_contract_address": {
                    "type": "string"
                  },
                  "ivk": {
                    "type": "string"
                  },
                  "ak": {
                    "type": "string"
                  },
                  "nk": {
                    "type": "string"
                  },
                  "visible": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getincomingviewingkey": {
      "post": {
        "summary": "GetIncomingViewingKey",
        "description": "",
        "operationId": "getincomingviewingkey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ak",
                  "nk"
                ],
                "properties": {
                  "ak": {
                    "type": "string",
                    "default": "72b041a8006a02a995c24f5b8531a62008c8c54a1979622dc4ea6f54a506732d"
                  },
                  "nk": {
                    "type": "string",
                    "default": "da6542f57f6f730cb31b401b9ca8660589d8a765405c6d6f48fd392ac5360b0a"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"ivk\": \"6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "ivk": {
                      "type": "string",
                      "example": "6896b46a8355ae75896900ac617293d98e1b48fd885ed484a7cbddd566762705"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getdiversifier": {
      "get": {
        "summary": "GetDiversifier",
        "description": "",
        "operationId": "getdiversifier",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\"d\": \"dd6b441bd5dcb9c25ec41f\"}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "d": {
                      "type": "string",
                      "example": "dd6b441bd5dcb9c25ec41f"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/gettriggerinputforshieldedtrc20contract": {
      "post": {
        "summary": "GetTriggerInputForShieldedTrc20Contract",
        "description": "",
        "operationId": "gettriggerinputforshieldedtrc20contract",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/createspendauthsig": {
      "post": {
        "summary": "CreateSpendAuthSig",
        "description": "Note:To ensure security, Trongrid has disabled this interface service, please use the service provided by the local node.",
        "operationId": "createspendauthsig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ask",
                  "tx_hash",
                  "alpha"
                ],
                "properties": {
                  "ask": {
                    "type": "string"
                  },
                  "tx_hash": {
                    "type": "string"
                  },
                  "alpha": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"value\": \"1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "example": "1947036add76206b9f9b03ffd9d9526c5547db955387798f15c5e7c911f41eadc23eee214e64be792a404b77c64335a675c3489ca63d0d471de484c3a606d002"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getpendingsize": {
      "get": {
        "summary": "GetPendingSize",
        "description": "Get the size of the pending pool queue",
        "operationId": "getpendingsize",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\"pendingSize\": 126}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "pendingSize": {
                      "type": "integer",
                      "example": 126,
                      "default": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getaccountbalance": {
      "post": {
        "summary": "GetAccountBalance",
        "description": "Get the account balance in a specific block.(Note: At present, the interface data can only be queried through the following official nodes 13.228.119.63 & 18.139.193.235 & 18.141.79.38 & 18.139.248.26)",
        "operationId": "getaccountbalance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account_identifier": {
                    "type": "string",
                    "default": "{         \"address\": \"TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm\"     }",
                    "format": "json"
                  },
                  "block_identifier": {
                    "type": "string",
                    "default": "{         \"hash\": \"0000000000010c4a732d1e215e87466271e425c86945783c3d3f122bfa5affd9\",         \"number\": 68682     }",
                    "format": "json"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"balance\": 64086449348265042,\n    \"block_identifier\": {\n        \"hash\": \"0000000000010c4a732d1e215e87466271e425c86945783c3d3f122bfa5affd9\",\n        \"number\": 68682\n    }\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "integer",
                      "example": 64086449348265040,
                      "default": 0
                    },
                    "block_identifier": {
                      "type": "object",
                      "properties": {
                        "hash": {
                          "type": "string",
                          "example": "0000000000010c4a732d1e215e87466271e425c86945783c3d3f122bfa5affd9"
                        },
                        "number": {
                          "type": "integer",
                          "example": 68682,
                          "default": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/gettransactionlistfrompending": {
      "get": {
        "summary": "GetTransactionListFromPending",
        "description": "Get transaction list information from pending pool",
        "operationId": "gettransactionlistfrompending",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"txId\": [\n        \"48ce8d57e83cc6c28737b785af4d0732c70fa73c2900ed4291b376364872775a\",\n        \"3b37e600a2d90cd464c2a8ca58b1f0183b75667a0a50d8e17db440b2f614084c\",\n        \"bf40178f1d2d12a90d5caee5c71fa45f61c3c532328041c0fb44dc57b17dcd4c\",\n        \"596b39cf802a0eb7bda035e124f1936f7ae01f7c418dc1f0628f077be180382a\",\n        \"13f0f3e65f9dc1ad72117dbfd38c66c46355ca36dff85507b04216169cffc07b\"\n    ]\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "txId": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "48ce8d57e83cc6c28737b785af4d0732c70fa73c2900ed4291b376364872775a"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getblockbalance": {
      "post": {
        "summary": "GetBlockBalance",
        "description": "Get all balance change operations in a block.(Note: At present, the interface data can only be queried through the following official nodes 13.228.119.63 & 18.139.193.235&18.141.79.38 &18.139.248.26)",
        "operationId": "getblockbalance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hash": {
                    "type": "string",
                    "default": "0000000001f5b9ca67c722d9263879696c92e8e383d4f0b31c15a91b8a249029"
                  },
                  "number": {
                    "type": "integer",
                    "default": 32881098,
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"block_identifier\": {\n        \"hash\": \"000000000000dc2a3731e28a75b49ac1379bcc425afc95f6ab3916689fbb0189\",\n        \"number\": 56362\n    },\n    \"timestamp\": 1530060672000,\n    \"transaction_balance_trace\": [\n        {\n            \"transaction_identifier\": \"e6cabb1833cd1f795eed39d8dd7689eaa70e5bb217611766c74c7aa9feea80df\",\n            \"operation\": [\n                {\n                    \"operation_identifier\": 0,\n                    \"address\": \"TPttBLmFuykRi83y9HxDoEWxTQw6CCcQ4p\",\n                    \"amount\": -100000\n                },\n                {\n                    \"operation_identifier\": 1,\n                    \"address\": \"TLsV52sRDL79HXGGm9yzwKibb6BeruhUzy\",\n                    \"amount\": 100000\n                },\n                {\n                    \"operation_identifier\": 2,\n                    \"address\": \"TPttBLmFuykRi83y9HxDoEWxTQw6CCcQ4p\",\n                    \"amount\": -10000000\n                },\n                {\n                    \"operation_identifier\": 3,\n                    \"address\": \"TMrysg7DbwR1M8xqhpaPdVCHCuWFhw7uk1\",\n                    \"amount\": 10000000\n                }\n            ],\n            \"type\": \"TransferContract\",\n            \"status\": \"SUCCESS\"\n        }\n    ]\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "block_identifier": {
                      "type": "object",
                      "properties": {
                        "hash": {
                          "type": "string",
                          "example": "000000000000dc2a3731e28a75b49ac1379bcc425afc95f6ab3916689fbb0189"
                        },
                        "number": {
                          "type": "integer",
                          "example": 56362,
                          "default": 0
                        }
                      }
                    },
                    "timestamp": {
                      "type": "integer",
                      "example": 1530060672000,
                      "default": 0
                    },
                    "transaction_balance_trace": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "transaction_identifier": {
                            "type": "string",
                            "example": "e6cabb1833cd1f795eed39d8dd7689eaa70e5bb217611766c74c7aa9feea80df"
                          },
                          "operation": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "operation_identifier": {
                                  "type": "integer",
                                  "example": 0,
                                  "default": 0
                                },
                                "address": {
                                  "type": "string",
                                  "example": "TPttBLmFuykRi83y9HxDoEWxTQw6CCcQ4p"
                                },
                                "amount": {
                                  "type": "integer",
                                  "example": -100000,
                                  "default": 0
                                }
                              }
                            }
                          },
                          "type": {
                            "type": "string",
                            "example": "TransferContract"
                          },
                          "status": {
                            "type": "string",
                            "example": "SUCCESS"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/gettransactionfrompending": {
      "post": {
        "summary": "GetTransactionFromPending",
        "description": "Get transaction details from the pending pool",
        "operationId": "gettransactionfrompending",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "default": "f34f1c799700a9d83b67fdcadd7be697010a8dbbcd520de4ac46a648e3e7ae3d"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n    \"ret\": [\n        {\n            \"contractRet\": \"SUCCESS\"\n        }\n    ],\n    \"signature\": [\n        \"693ad22a762a6228423f77cdb36440a3b93d7b1cbec7aa3822454e6146fb2af5075e541f298fcc8d68e51f3d0ae34e7b713e4f1582e70b0eba1b1436c848b15a1b\"\n    ],\n    \"txID\": \"f34f1c799700a9d83b67fdcadd7be697010a8dbbcd520de4ac46a648e3e7ae3d\",\n    \"raw_data\": {\n        \"contract\": [\n            {\n                \"parameter\": {\n                    \"value\": {\n                        \"amount\": 234000000,\n                        \"owner_address\": \"4192c47b086eae54ed142d75ce4806df751bac7551\",\n                        \"to_address\": \"411113df41d4f3b8b46acc40c266bee87eca42c73d\"\n                    },\n                    \"type_url\": \"type.googleapis.com/protocol.TransferContract\"\n                },\n                \"type\": \"TransferContract\"\n            }\n        ],\n        \"ref_block_bytes\": \"6d64\",\n        \"ref_block_hash\": \"f35991f9b546f69f\",\n        \"expiration\": 1616394384000,\n        \"timestamp\": 1616394325960\n    },\n    \"raw_data_hex\": \"0a026d642208f35991f9b546f69f4080e5f3c4852f5a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154192c47b086eae54ed142d75ce4806df751bac75511215411113df41d4f3b8b46acc40c266bee87eca42c73d18809dca6f70c89ff0c4852f\"\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "ret": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contractRet": {
                            "type": "string",
                            "example": "SUCCESS"
                          }
                        }
                      }
                    },
                    "signature": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "693ad22a762a6228423f77cdb36440a3b93d7b1cbec7aa3822454e6146fb2af5075e541f298fcc8d68e51f3d0ae34e7b713e4f1582e70b0eba1b1436c848b15a1b"
                      }
                    },
                    "txID": {
                      "type": "string",
                      "example": "f34f1c799700a9d83b67fdcadd7be697010a8dbbcd520de4ac46a648e3e7ae3d"
                    },
                    "raw_data": {
                      "type": "object",
                      "properties": {
                        "contract": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "parameter": {
                                "type": "object",
                                "properties": {
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "amount": {
                                        "type": "integer",
                                        "example": 234000000,
                                        "default": 0
                                      },
                                      "owner_address": {
                                        "type": "string",
                                        "example": "4192c47b086eae54ed142d75ce4806df751bac7551"
                                      },
                                      "to_address": {
                                        "type": "string",
                                        "example": "411113df41d4f3b8b46acc40c266bee87eca42c73d"
                                      }
                                    }
                                  },
                                  "type_url": {
                                    "type": "string",
                                    "example": "type.googleapis.com/protocol.TransferContract"
                                  }
                                }
                              },
                              "type": {
                                "type": "string",
                                "example": "TransferContract"
                              }
                            }
                          }
                        },
                        "ref_block_bytes": {
                          "type": "string",
                          "example": "6d64"
                        },
                        "ref_block_hash": {
                          "type": "string",
                          "example": "f35991f9b546f69f"
                        },
                        "expiration": {
                          "type": "integer",
                          "example": 1616394384000,
                          "default": 0
                        },
                        "timestamp": {
                          "type": "integer",
                          "example": 1616394325960,
                          "default": 0
                        }
                      }
                    },
                    "raw_data_hex": {
                      "type": "string",
                      "example": "0a026d642208f35991f9b546f69f4080e5f3c4852f5a68080112640a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412330a154192c47b086eae54ed142d75ce4806df751bac75511215411113df41d4f3b8b46acc40c266bee87eca42c73d18809dca6f70c89ff0c4852f"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getcontractinfo": {
      "post": {
        "summary": "GetContractInfo",
        "description": "Queries a contract's information from the blockchain. The difference from the `wallet/getcontract` interface is that this interface returns not only the `bytecode` but also the `runtime bytecode` of the contract. Compared with `bytecode`, `runtime bytecode` does not contain constructor and constructor parameter information.",
        "operationId": "getcontractinfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Contract address, converted to a hex string.",
                    "default": "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/wallet/getbandwidthprices": {
      "get": {
        "summary": "GetBandwidthPrices",
        "description": "Query historical bandwidth unit price",
        "operationId": "getbandwidthprices",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Output": {
                    "value": ""
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getnowblock', function(data) {\n    console.log(data);\n});"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/getblock": {
      "post": {
        "summary": "GetBlock",
        "description": "Query block header information or entire block information according to block height or block hash",
        "operationId": "getblock-1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_or_num": {
                    "type": "string",
                    "description": "id_or_num can be the block height or the block hash. No value entered means to query the latest block.",
                    "default": "1000000"
                  },
                  "detail": {
                    "type": "boolean",
                    "description": "true means query the entire block information include the header and body. false means only query the block header information.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Output": {
                    "value": ""
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getblockbynum', {\"num\" : 100}, function(data) {\n    console.log(data);\n});",
              "name": "JavaScript"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/getenergyprices": {
      "get": {
        "summary": "GetEnergyPrices",
        "description": "Query historical energy unit price",
        "operationId": "getenergyprices",
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/estimateenergy": {
      "post": {
        "summary": "EstimateEnergy",
        "description": "Estimate the energy required for the successful execution of smart contract transactions or deploying a contract",
        "operationId": "estimateenergy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address that triggers the contract. If visible=true, use base58check format, otherwise use hex format. For constant call you can use the all-zero address.",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "contract_address": {
                    "type": "string",
                    "description": "Smart contract address. If visible=true, use base58check format, otherwise use hex format.",
                    "default": "TG3XXyExBkPp9nzdajDZsozEu4BkaSJozs"
                  },
                  "function_selector": {
                    "type": "string",
                    "description": "Function call, must not be left blank.",
                    "default": "balanceOf(address)"
                  },
                  "parameter": {
                    "type": "string",
                    "description": "Parameter encoding needs to be in accordance with the ABI rules, the rules are more complicated, users can use the ethers library to encode,For details, please refer to the document-Guide-Smart Contract-Best Practice-Parameter Encoding and Decoding.",
                    "default": "000000000000000000000000a614f803b6fd780986a42c78ec9c7f77e6ded13c"
                  },
                  "data": {
                    "type": "string",
                    "description": "The bytecode of the contract or the data for interacting with smart contracts, including the contract function and parameters. You can choose to use this field, or you can choose to use function_selector and parameter for contract interaction. When both of data and function_selector exist, function_selector is preferred"
                  },
                  "call_value": {
                    "type": "integer",
                    "description": "Amount of TRX transferred with this transaction, measured in SUN (1 TRX = 1,000,000 SUN).",
                    "format": "int64"
                  },
                  "call_token_value": {
                    "type": "integer",
                    "description": "Amount of TRC10 token transferred with this transaction",
                    "format": "int64"
                  },
                  "token_id": {
                    "type": "integer",
                    "description": "TRC10 token id",
                    "format": "int64"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{\n  \"result\":{\"result\":true},\n  // constant_result should be parsed by corresponding ABI\n  \"constant_result\":[\"000000000000000000000000000000000000000000000000000009a1832a6361\"]\n // ...\n}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "result": {
                          "type": "boolean",
                          "example": true,
                          "default": true
                        }
                      }
                    },
                    "constant_result": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "000000000000000000000000000000000000000000000000000009a1832a6361"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getburntrx": {
      "get": {
        "summary": "GetBurnTRX",
        "description": "Query the amount of TRX burned due to on-chain transaction fees since [No. 54 Committee Proposal ](https://tronscan.org/#/proposal/54) took effect",
        "operationId": "getburntrx",
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Output": {
                    "value": ""
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getnowblock', function(data) {\n    console.log(data);\n});"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    },
    "/wallet/freezebalancev2": {
      "post": {
        "summary": "FreezeBalanceV2",
        "description": "In Stake2.0, stake an amount of TRX to obtain bandwidth or energy, and obtain equivalent TRON Power(TP) according to the staked amount",
        "operationId": "freezebalancev2-1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner_address",
                  "frozen_balance",
                  "resource"
                ],
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "frozen_balance": {
                    "type": "integer",
                    "description": "TRX stake amount, the unit is sun",
                    "default": 10000000,
                    "format": "int64"
                  },
                  "resource": {
                    "type": "string",
                    "description": "TRX stake type, 'BANDWIDTH' or 'ENERGY'",
                    "default": "ENERGY"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/withdrawexpireunfreeze": {
      "post": {
        "summary": "WithdrawExpireUnfreeze",
        "description": "Withdraw unfrozen balance in Stake2.0,  the user can call this API to get back their funds after executing /wallet/unfreezebalancev2 transaction and waiting N days, N is a network parameter",
        "operationId": "withdrawexpireunfreeze",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/delegateresource": {
      "post": {
        "summary": "DelegateResource",
        "description": "Delegate bandwidth or energy resources to other accounts in Stake2.0.",
        "operationId": "delegateresource-1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "receiver_address": {
                    "type": "string",
                    "description": "Resource receiver address",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "balance": {
                    "type": "integer",
                    "description": "Amount of TRX staked for resources to be delegated, unit is sun",
                    "default": 1000000,
                    "format": "int64"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Resource type: 'BANDWIDTH' or 'ENERGY'",
                    "default": "BANDWIDTH"
                  },
                  "lock": {
                    "type": "boolean",
                    "description": "Whether it is locked (default is false), if it is set to true, the delegated resources cannot be undelegated within the lock period specified by `lock_period`. When the lock time is not over, if the owner delegates the same type of resources using the lock to the same address, the lock time will be set to the value specified by `lock_period`. If it is false, that means there is no lock-up period for this resource delegation, and the resource for the target address can be canceled at any time. The default value of this field is false",
                    "default": false
                  },
                  "lock_period": {
                    "type": "integer",
                    "description": "Lock time,The unit is block interval(3 seconds),  indicates the time of how many blocks which the delegation will be locked. Only when lock is true, this field is valid. If the delegate lock period is 1 day, the lock_period is: 28800. The minimum value of lock_period is the remaining lock period of this type of resource that was delegated last time, and the maximum value is 864000 (30 days). If lock is true and lock_period is not set or set to 0, lock_period will be set to the default value 86400 (3 days) automatically",
                    "format": "int64"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getcanwithdrawunfreezeamount": {
      "post": {
        "summary": "GetCanWithdrawUnfreezeAmount",
        "description": "Query the withdrawable balance at the specified timestamp In Stake2.0",
        "operationId": "getcanwithdrawunfreezeamount-1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "timestamp": {
                    "type": "integer",
                    "description": "query cutoff timestamp, in milliseconds.",
                    "default": 1667977444000,
                    "format": "int64"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getavailableunfreezecount": {
      "post": {
        "summary": "GetAvailableUnfreezeCount",
        "description": "Remaining times of executing unstake operation in Stake2.0",
        "operationId": "getavailableunfreezecount-1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getdelegatedresourceaccountindexv2": {
      "post": {
        "summary": "GetDelegatedResourceAccountIndexV2",
        "description": "In Stake2.0, query the resource delegation index by an account. Two lists will return, one is the list of addresses the account has delegated its resources(toAddress), and the other is the list of addresses that have delegated resources to the account(fromAddress).",
        "operationId": "getdelegatedresourceaccountindexv2-1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "account address, default hexString",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getcandelegatedmaxsize": {
      "post": {
        "summary": "GetCanDelegatedMaxSize",
        "description": "In Stake2.0, query the amount of delegatable resources share of the specified resource type for an address, unit is sun.",
        "operationId": "getcandelegatedmaxsize",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "type": {
                    "type": "integer",
                    "description": "resource type, 0 is bandwidth, 1 is energy",
                    "default": 0,
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/unfreezebalancev2": {
      "post": {
        "summary": "UnfreezeBalanceV2",
        "description": "Unstake some TRX staked in Stake2.0, release the corresponding amount of bandwidth or energy, and voting rights (TP)",
        "operationId": "unfreezebalancev2-1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "unfreeze_balance": {
                    "type": "integer",
                    "description": "The amount of TRX to unstake, in sun",
                    "default": 1000000,
                    "format": "int64"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Resource type: 'BANDWIDTH' or 'ENERGY'",
                    "default": "BANDWIDTH"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/undelegateresource": {
      "post": {
        "summary": "UnDelegateResource",
        "description": "Cancel the delegation of bandwidth or energy resources to other accounts in Stake2.0",
        "operationId": "undelegateresource-1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "receiver_address": {
                    "type": "string",
                    "description": "Resource receiver address",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "balance": {
                    "type": "integer",
                    "description": "Amount of TRX staked for resources to be delegated, unit is sun",
                    "default": 1000000,
                    "format": "int64"
                  },
                  "resource": {
                    "type": "string",
                    "description": "Resource type: 'BANDWIDTH' or 'ENERGY'",
                    "default": "BANDWIDTH"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getdelegatedresourcev2": {
      "post": {
        "summary": "GetDelegatedResourceV2",
        "description": "In Stake2.0, query the detail of resource share delegated from fromAddress to toAddress",
        "operationId": "getdelegatedresourcev2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fromAddress": {
                    "type": "string",
                    "description": "resource from address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "toAddress": {
                    "type": "string",
                    "description": "resource to address",
                    "default": "TPswDDCAWhJAZGdHPidFg5nEf8TkNToDX1"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getassetissuebyname": {
      "post": {
        "summary": "GetAssetIssueByName",
        "description": "Query a token by name, returns token info.",
        "operationId": "getassetissuebyname-copy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "TRC 10 token name, default hexString",
                    "default": "62747474657374"
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/cancelallunfreezev2": {
      "post": {
        "summary": "CancelAllUnfreezeV2",
        "description": "Cancel unstakings, all unstaked funds still in the waiting period will be re-staked, all unstaked funds that exceeded the 14-day waiting period will be automatically withdrawn to the owner’s account",
        "operationId": "cancelallunfreezev2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_address": {
                    "type": "string",
                    "description": "Owner address, default hexString",
                    "default": "TZ4UXDV5ZhNW7fb2AMSbgfAEZ7hWsnYS2g"
                  },
                  "Permission_id": {
                    "type": "integer",
                    "description": "Optional, for multi-signature use",
                    "format": "int32"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Specifies whether the address is in Base58 format (default: false). Note: Set to true in this example for demonstration purposes.",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "400",
            "content": {
              "application/json": {
                "examples": {
                  "Result": {
                    "value": "{}"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getassetissuelistbyname": {
      "post": {
        "summary": "GetAssetIssueListByName",
        "description": "Query the list of all the TRC10 tokens by a name.",
        "operationId": "getassetissuelistbyname-copy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "Name of the TRC 10 token, default hexString",
                    "default": "62747474657374"
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": []
      }
    },
    "/wallet/getapprovedlist": {
      "post": {
        "summary": "GetApprovedList",
        "description": "Query the account address list which signed the transaction.",
        "operationId": "http-getapprovedlist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "signature",
                  "raw_data"
                ],
                "properties": {
                  "signature": {
                    "type": "array",
                    "description": "The signature list of transaction",
                    "default": [
                      "e0bd4a60f1b3c89d4da3894d400e7e32385f6dd690aee17fdac4e016cdb294c5128b66f62f3947a7182c015547496eba95510c113bda2a361d811b829343c36501",
                      "596ead6439d0f381e67f30b1ed6b3687f2bd53ce5140cdb126cfe4183235804741eeaf79b4e91f251fd7042380a9485d4d29d67f112d5387bc7457b355cd3c4200"
                    ],
                    "items": {
                      "type": "string"
                    }
                  },
                  "raw_data": {
                    "type": "string",
                    "description": "The transaction raw data",
                    "default": "{         \"contract\": [             {                 \"parameter\": {                     \"value\": {                         \"amount\": 1000000,                         \"owner_address\": \"41A7D8A35B260395C14AA456297662092BA3B76FC0\",                         \"to_address\": \"415A523B449890854C8FC460AB602DF9F31FE4293F\"                     },                     \"type_url\": \"type.googleapis.com/protocol.TransferContract\"                 },                 \"type\": \"TransferContract\"             }         ],         \"ref_block_bytes\": \"163d\",         \"ref_block_hash\": \"77ef4ace148b05ba\",         \"expiration\": 1555664823000,         \"timestamp\": 1555664763418     }",
                    "format": "json"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Optional. Whehter the address is in base58check format.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200",
            "content": {
              "application/json": {
                "examples": {
                  "Example API Call Output": {
                    "value": ""
                  }
                }
              }
            }
          }
        },
        "deprecated": false,
        "security": [],
        "x-readme": {
          "code-samples": [
            {
              "language": "javascript",
              "code": "$.post('https://api.trongrid.io/wallet/getnowblock', function(data) {\n    console.log(data);\n});"
            }
          ],
          "samples-languages": [
            "javascript"
          ]
        }
      }
    }
  },
  "x-readme": {
    "headers": []
  },
  "x-readme-fauxas": true
}